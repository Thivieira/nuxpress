
July 23, 2017

A 30-second introduction to Nuxt.js plus 
notes on getting ElementUI to run with it.

# Nuxt and ElementUI

![Flash MX components][fmx-components] My first contact with _UI components_ 
was with [Flash MX][] back in 2002. For someone who had started coding with 
Flash and never used other tools, I was impressed. I thought these were 
going to take over the web back then. And studying their source accounted 
for much of my programming education.

[]: http://www.tutorialized.com/tutorial/CGI-Forms-With-Flash-MX-and-UI-Components-Set-2/3093
[fmx-components]: /entries/nuxt-elementui-fmx.gif#float-right

I'm feeling **_nostalgic_** about that time.

Since then (_and moving on from Flash_) I have used [jQuery UI][], 
[ExtJS][] and most recently, [Bootstrap][]. None of them came close to 
giving me the excitement [ElementUI][] has. Built entirely in Vue (although 
there's also a [React fork][]), it has a wide range of beautifully designed 
UI controls, a [clean API][], [built-in form validation][] and a rather 
[decent grid system][]. I'm hooked.

[]: https://jqueryui.com
[]: https://www.sencha.com/products/extjs/#overview
[]: http://getbootstrap.com/components/
[]: http://element.eleme.io
[]: https://github.com/eleme/element-react
[]: http://element.eleme.io/#/en-US/component/quickstart
[]: http://element.eleme.io/#/en-US/component/form
[]: http://element.eleme.io/#/en-US/component/layout

I feel Vue lets me harness JavaScript's expressiveness on real problems, 
bringing boilerplate to the absolute minimum. <b>The code I have to write is 
concise, but still hackable</b> – and the same can be said for ElementUI – it's 
very easy to dive into the [Vue source for each component][] and figure things
out. We're only afraid of magic when we don't understand it. I find Vue's magic
is [approachable][] and [worthwhile to learn][].

[]: https://github.com/ElemeFE/element/tree/dev/packages
[]: https://vuejs.org/v2/guide/render-function.html
[]: https://www.skyronic.com/blog/vuejs-internals-computed-properties

[Nuxt][] is inspired by [Next][] and basically provides universal rendering 
for Vue applications. I was happy to discover it also features **the simplest, 
smartest set of conventions and defaults I've ever seen in a JavaScript 
framework**. In a world of endless configuration files and massive startup
scripts, its simplicity is refreshing.

[]: http://nuxtjs.org
[]: https://github.com/zeit/next.js
[]: https://nuxtjs.org/examples

**Here's a 30-second introduction to Nuxt**: `npm install nuxt`, add `nuxt` as 
the `start` script in `package.json`, create a `index.vue` file [like this][]
under `pages/`, `npm start` and **you're done**. It auto generates routes based
on `pages/` (dynamic routes [included][]), you can have master templates in 
`layouts/` plus `assets/`, `plugins/`, `components/` and `middleware/`.

[]: https://gist.github.com/galvez/45629a0065cb134172e3822c78e62e06
[]: https://nuxtjs.org/guide/routing#dynamic-routes

[Vuex][] is automatically set up if you have a `stored/index.js` file. Then you
just use [`nuxt.render`][] as a middleware on the server. All the asset 
bundling and the development server is handled with sensible defaults, or you 
can [cleanly extend Webpack][]. 

[]: https://nuxtjs.org/examples/vuex-store
[]: https://nuxtjs.org/api/nuxt-render/
[]: https://nuxtjs.org/api/configuration-build

There's not much else to say, it's that simple. Nuxt has been fully compatible 
with ElementUI [since December 2016][]. Just `npm install element-ui` and add 
`plugins/element-ui.js`:

[]: https://twitter.com/nuxt_js/status/814761953558204417?lang=en

```js
import Vue from 'vue'
const ElementUI = require('element-ui')
const locale = require('element-ui/lib/locale/lang/en')
Vue.use(ElementUI, { locale })
```

And then specify it in the `mono` entry of [`nuxt.config.js`][]. It did 
require setting _loaders_ explicitly as you would have in Webpack, to enable
loading of the ElementUI CSS. I liked how easy it was to make sure the CSS
was included beforehand.

[]: https://gist.github.com/galvez/f76aa8a7cc45ccdc40c9fbc110e29cb2

Nuxt adds an `asyncData()` method to page components that runs 
before any rendering happens. You can return a `Promise`-resolved object 
from it which is then merged with the object returned by `data()`. The 
snippet bellow **retrieves an image on the server and renders it as inline 
Base64 on the client**:

```
<template>
  <el-alert
    title="Image rendered as inline base64"
    type="success"
    :closable="false" />
  <img :src="img" />
</template>

<script>
import fetch from 'isomorphic-fetch'
export default {
  asyncData () {
    return fetch('https://vuejs.org/images/logo.png')
      .then((response) => response.buffer())
      .then((buffer) => {
        const vueLogo = buffer.toString('base64')
        return {
          img: `data:image/png;base64,${vueLogo}`
        }
      })
  }
}
</script>
```

ElementUI also makes `$alert()` and `$message()` readily available on the Vue 
instance ([among others][]). Just a tiny convenience, but it resonates with 
the overall experience I'm having with ElementUI. It's the first time _**I 
truly liked**_ a framework implementation of pieces of functionality I had to 
reimplement a dozen times. This might very well be my new first choice for 
building web applications.

[]: http://element.eleme.io/#/en-US/component/quickstart
